#+STARTUP: hidestars
* This is the setting for init.el
** Default Setting
*** Shortcut for init.el
    #+BEGIN_SRC emacs-lisp
      (defun open-my-init-file()
        (interactive)
        (find-file "~/.emacs.d/init.el"))
      (global-set-key (kbd "<f3>") 'open-my-init-file)    
    #+END_SRC
*** Windows Moving
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-S") 'windmove-up)
      (global-set-key (kbd "M-X") 'windmove-down)
      (global-set-key (kbd "M-C") 'windmove-right)
      (global-set-key (kbd "M-Z") 'windmove-left)    
    #+END_SRC
*** Recent File
    #+BEGIN_SRC emacs-lisp
      (require 'recentf)
      (recentf-mode 1)
      (setq recentf-max-menu-items 25)
      (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    #+END_SRC
*** Others
    #+BEGIN_SRC emacs-lisp
      (winner-mode 1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (global-linum-mode t)
      (global-hl-line-mode t)
      (set-face-attribute 'default nil :height 140)
      (setq-default cursor-type 'bar)
      (setq make-backup-files nil)
      (setq initial-frame-alist (quote ((fullscreen . maximized))))
      (defalias 'list-buffers 'ibuffer)
      (fset 'yes-or-no-p 'y-or-n-p)
      (global-set-key (kbd "<f5>") 'revert-buffer)
    #+END_SRC
** Package
*** Try
    #+BEGIN_SRC emacs-lisp
      (use-package try
         :ensure t)
    #+END_SRC
*** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config (which-key-mode))    
    #+END_SRC
*** org-bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
*** hungry-delete
    #+BEGIN_SRC emacs-lisp
      (use-package hungry-delete
        :ensure t
        :config (require 'hungry-delete))
      (global-hungry-delete-mode)
    #+END_SRC
*** smartparens
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :config (require 'smartparens-config))
      (smartparens-global-mode t)

    #+END_SRC
*** Ido mode
    #+BEGIN_SRC emacs-lisp
      (setq indo-enable-flex-matching t)
      (setq ido-everywhere t)
      (ido-mode 1)    
    #+END_SRC
*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
        :ensure t)

      (use-package swiper
        :ensure t
        :config
        (progn
          (ivy-mode 1)
          (setq ivy-use-virtual-buffers t)
          (setq enable-recursive-minibuffers t)
          (global-set-key "\C-s" 'swiper)
          (global-set-key (kbd "C-c C-r") 'ivy-resume)
          (global-set-key (kbd "<f6>") 'ivy-resume)
          (global-set-key (kbd "M-x") 'counsel-M-x)
          (global-set-key (kbd "C-x C-f") 'counsel-find-file)
          (global-set-key (kbd "<f1> f") 'counsel-describe-function)
          (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
          (global-set-key (kbd "<f1> l") 'counsel-find-library)
          (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
          (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
          (global-set-key (kbd "C-c g") 'counsel-git)
          (global-set-key (kbd "C-c j") 'counsel-git-grep)
          (global-set-key (kbd "C-c k") 'counsel-ag)
          (global-set-key (kbd "C-x l") 'counsel-locate)
          (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
          (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))    
    #+END_SRC
*** Theme setting (monokai)
    #+BEGIN_SRC emacs-lisp
      (use-package monokai-theme
        :ensure t)    
    #+END_SRC
*** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :bind ("M-s" . avy-goto-char)
              ("M-g f" . avy-goto-line))
    #+END_SRC
*** Company
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :config (add-hook 'after-init-hook 'global-company-mode))
    #+END_SRC
